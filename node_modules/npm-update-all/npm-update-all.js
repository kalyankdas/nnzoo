#!/usr/bin/env node

'use strict';

var cp = require('child_process'),
  pkg = require(process.cwd() + '/package.json'),
  params = process.argv.slice(2);

params = params.join(' ')
  .replace('--save', '')
  .replace('--save-dev', '')
  .split(' ');

var args, result;

if (pkg.dependencies) {
  var deps = Object.keys(pkg.dependencies);

  for (var i = 0; i < deps.length; i++) {
    var version = pkg.dependencies[deps[i]];

    if (needSave(version)) {
      args = ['update', deps[i], '--save'].concat(params);
    } else {
      args = ['update', deps[i]].concat(params);
    }

    console.log('npm', args.join(' '));

    result = cp.spawnSync('npm', args);

    if (result.status) {
      console.error(result.stderr.toString());
    } else {
      console.info(result.stdout.toString());
    }
  }
}

if (pkg.devDependencies) {
  var devDeps = Object.keys(pkg.devDependencies);

  for (var j = 0; j < devDeps.length; j++) {
    var version = pkg.devDependencies[devDeps[j]];

    if (needSave(version)) {
      args = ['update', devDeps[j], '--save-dev'].concat(params);
    } else {
      args = ['update', devDeps[j]].concat(params);
    }

    console.log('npm', args.join(' '));

    result = cp.spawnSync('npm', args);

    if (result.status) {
      console.error(result.stderr.toString());
    } else {
      console.info(result.stdout.toString());
    }
  }
}

function needSave(v) {
  // save
  // ~x.x.x, ^x.x.x, 0.0.x

  // not save
  // x, *
  if (v.indexOf('~') === 0 || v.indexOf('^') === 0 || v.indexOf('0.') === 0) {
    return true;
  }

  return false;
}
